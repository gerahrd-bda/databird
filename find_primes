import time

""" A curious data analyst set out to find prime numbers hidden within a list. 
Unsure of the best approach, he decided to only check for divisors up to the square root of each number,
thinking: This might save me some time!
He looped through the numbers, cautiously marking off those that weren't prime whenever a smaller divisor was found. 
As the list of primes grew, he couldn't help but wonder if they missed any numbers or took unnecessary steps. 
But in the end, the method worked surprisingly well, 
and the analyst was left both relieved and a bit skeptical about how simple it all seemed.
"""

# Start the timer
start_time = time.time()

# Define the range of numbers to check
nums = range(1, 1_000_000)

# Define the function to check if a number is prime
def is_prime(num):
    for x in range(2, int(num**0.5) + 1):
        # This technique reduces the computational complexity from O(n) to O(âˆšn) which is particularly beneficial for large numbers ;-)
        if (num % x) == 0:
            return False
    return True

# Use filter to find all prime numbers in the range
primes = list(filter(is_prime, nums))

# Stop the timer
end_time = time.time()

# Print the list of prime numbers
print(primes)

# Print the duration
print(f"Time taken: {end_time - start_time} seconds")
