I got the a CSV dataset "athlete_events.csv" about the Olympics since 1896 to 2020 from "www.kaggle.com".

To analyze the CSV file and extract patterns and insights, 
I utilized several Python libraries such as pandas, matplotlib, seaborn, and scikit-learn.
I also created a dashboard using Plotly and Dash to visualize the data interactively.

Here is the Python program that covered the data analysis:

Data loading and preprocessing
Exploratory data analysis (EDA)
Visualization and dashboard
Predictive modeling

First, I loaded and inspected the data:

import pandas as pd

# Load the CSV file
file_path = '/olympics_1896_2020/athlete_events.csv'
df = pd.read_csv(file_path)

# Display basic information about the dataframe
print(df.info())
print(df.head())

Next, I performed some basic data cleaning and preprocessing:

# Convert date columns to datetime if necessary
# df['DATE'] = pd.to_datetime(df['DATE'], format='%d/%m/%Y')

# Check for missing values
print(df.isnull().sum())

# Handle missing values (e.g., fill with mean/median or drop)
df = df.dropna()  # For simplicity, drop all rows with missing values

EDA:

import matplotlib.pyplot as plt
import seaborn as sns

# Descriptive statistics
print(df.describe())

# Histogram of numerical columns
df.hist(bins=30, figsize=(15, 10))
plt.show()

# Correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

Visualization and dashboard using Plotly and Dash:
import plotly.express as px
import plotly.graph_objects as go
from dash import Dash, html, dcc

# Example Plotly visualizations
fig1 = px.histogram(df, x='Age', title='Age Distribution of Athletes')
fig2 = px.box(df, x='Sex', y='Height', title='Height Distribution by Gender')
fig3 = px.scatter(df, x='Height', y='Weight', color='Sex', title='Height vs Weight by Gender')

# Dash application
app = Dash(__name__)

app.layout = html.Div(children=[
    html.H1(children='Olympic Athletes Analysis Dashboard'),

    html.Div(children='''
        An interactive dashboard to analyze the athlete events dataset.
    '''),

    dcc.Graph(
        id='age-distribution',
        figure=fig1
    ),
    dcc.Graph(
        id='height-distribution-gender',
        figure=fig2
    ),
    dcc.Graph(
        id='height-weight-gender',
        figure=fig3
    )
])

if __name__ == '__main__':
    app.run_server(debug=True)
	
	
Predictive modeling:
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Example: Predicting Weight based on Height and Age
X = df[['Height', 'Age']]
y = df['Weight']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

# Plot the predictions vs actual values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel('Actual Weight')
plt.ylabel('Predicted Weight')
plt.title('Actual vs Predicted Weight')
plt.show()


Explanation: Data loading and preprocessing:

Loaded the CSV file.
Display basic information about the DataFrame.

Handled missing values by dropping rows with any missing data.

EDA:

Calculated descriptive statistics.
Filtered out non-numeric columns for the correlation matrix.
Plotted histograms of numerical columns.
Generated a correlation matrix and visualized it using seaborn's heatmap.

Visualization:

Created interactive visualizations using Plotly and build a Dash application.

Predictive Modeling:

Trained a simple linear regression model to predict athlete weight based on height and age.
Evaluatet the model and plot the predictions against actual values.
By excluding non-numeric columns from the correlation matrix calculation, 
the program worked well without errors and provided meaningful insights into the data.



The full program below :

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from dash import Dash, html, dcc
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the CSV file
file_path = '/olympics_1986_2020/athlete_events.csv'
df = pd.read_csv(file_path)

# Display basic information about the dataframe
print(df.info())
print(df.head())

# Check for missing values
print(df.isnull().sum())

# Handle missing values (e.g., fill with mean/median or drop)
df = df.dropna()  # For simplicity, drop all rows with missing values

# Descriptive statistics
print(df.describe())

# Filter out non-numeric columns for correlation matrix
numeric_df = df.select_dtypes(include=['float64', 'int64'])

# Histogram of numerical columns
numeric_df.hist(bins=30, figsize=(15, 10))
plt.show()

# Correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Example Plotly visualizations
fig1 = px.histogram(df, x='Age', title='Age Distribution of Athletes')
fig2 = px.box(df, x='Sex', y='Height', title='Height Distribution by Gender')
fig3 = px.scatter(df, x='Height', y='Weight', color='Sex', title='Height vs Weight by Gender')

# Dash application
app = Dash(__name__)

app.layout = html.Div(children=[
    html.H1(children='Olympic Athletes Analysis Dashboard'),

    html.Div(children='''
        An interactive dashboard to analyze the athlete events dataset.
    '''),

    dcc.Graph(
        id='age-distribution',
        figure=fig1
    ),
    dcc.Graph(
        id='height-distribution-gender',
        figure=fig2
    ),
    dcc.Graph(
        id='height-weight-gender',
        figure=fig3
    )
])

# Example: Predicting Weight based on Height and Age
X = df[['Height', 'Age']]
y = df['Weight']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

# Plot the predictions vs actual values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel('Actual Weight')
plt.ylabel('Predicted Weight')
plt.title('Actual vs Predicted Weight')
plt.show()

if __name__ == '__main__':
    app.run_server(debug=True)
